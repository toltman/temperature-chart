{"id":"jUYJ","dependencies":[{"name":"/home/toltm/data-viz/temperature/node_modules/vega-lite/build/src/spec/toplevel.js.map","includedInParent":true,"mtime":499162500000},{"name":"/home/toltm/data-viz/temperature/node_modules/vega-lite/src/spec/toplevel.ts","includedInParent":true,"mtime":499162500000},{"name":"/home/toltm/data-viz/temperature/package.json","includedInParent":true,"mtime":1591977532257},{"name":"/home/toltm/data-viz/temperature/node_modules/vega-lite/build/package.json","includedInParent":true,"mtime":499162500000},{"name":"../channel","loc":{"line":1,"column":40},"parent":"/home/toltm/data-viz/temperature/node_modules/vega-lite/build/src/spec/toplevel.js","resolved":"/home/toltm/data-viz/temperature/node_modules/vega-lite/build/src/channel.js"}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.isFitType=t,exports.getFitType=r,exports.extractTopLevelProperties=n;var e=require(\"../channel\");function t(e){return\"fit\"===e||\"fit-x\"===e||\"fit-y\"===e}function r(t){return t?`fit-${(0,e.getPositionScaleChannel)(t)}`:\"fit\"}const i=[\"background\",\"padding\"];function n(e){return i.reduce((t,r)=>(e&&void 0!==e[r]&&(t[r]=e[r]),t),{})}"},"sourceMaps":{"js":{"mappings":[{"source":"../../../src/spec/toplevel.ts","name":null,"original":{"line":114,"column":1},"generated":{"line":1,"column":0}},{"source":"../../../src/spec/toplevel.ts","name":null,"original":{"line":114,"column":1},"generated":{"line":1,"column":13}},{"source":"../../../src/spec/toplevel.ts","name":null,"original":{"line":114,"column":1},"generated":{"line":1,"column":20}},{"source":"../../../src/spec/toplevel.ts","name":null,"original":{"line":114,"column":1},"generated":{"line":1,"column":35}},{"source":"../../../src/spec/toplevel.ts","name":null,"original":{"line":114,"column":1},"generated":{"line":1,"column":43}},{"source":"../../../src/spec/toplevel.ts","name":null,"original":{"line":114,"column":1},"generated":{"line":1,"column":56}},{"source":"../../../src/spec/toplevel.ts","name":null,"original":{"line":114,"column":1},"generated":{"line":1,"column":57}},{"source":"../../../src/spec/toplevel.ts","name":null,"original":{"line":114,"column":1},"generated":{"line":1,"column":64}},{"source":"../../../src/spec/toplevel.ts","name":null,"original":{"line":114,"column":1},"generated":{"line":1,"column":68}},{"source":"../../../src/spec/toplevel.ts","name":null,"original":{"line":114,"column":1},"generated":{"line":1,"column":76}},{"source":"../../../src/spec/toplevel.ts","name":null,"original":{"line":114,"column":1},"generated":{"line":1,"column":86}},{"source":"../../../src/spec/toplevel.ts","name":null,"original":{"line":114,"column":1},"generated":{"line":1,"column":88}},{"source":"../../../src/spec/toplevel.ts","name":null,"original":{"line":114,"column":1},"generated":{"line":1,"column":96}},{"source":"../../../src/spec/toplevel.ts","name":null,"original":{"line":114,"column":1},"generated":{"line":1,"column":107}},{"source":"../../../src/spec/toplevel.ts","name":null,"original":{"line":114,"column":1},"generated":{"line":1,"column":109}},{"source":"../../../src/spec/toplevel.ts","name":null,"original":{"line":114,"column":1},"generated":{"line":1,"column":117}},{"source":"../../../src/spec/toplevel.ts","name":null,"original":{"line":114,"column":1},"generated":{"line":1,"column":143}},{"source":"../../../src/spec/toplevel.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":1,"column":145}},{"source":"../../../src/spec/toplevel.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":1,"column":149}},{"source":"../../../src/spec/toplevel.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":1,"column":151}},{"source":"../../../src/spec/toplevel.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":1,"column":159}},{"source":"../../../src/spec/toplevel.ts","name":null,"original":{"line":68,"column":6},"generated":{"line":1,"column":173}},{"source":"../../../src/spec/toplevel.ts","name":null,"original":{"line":68,"column":16},"generated":{"line":1,"column":182}},{"source":"../../../src/spec/toplevel.ts","name":null,"original":{"line":68,"column":26},"generated":{"line":1,"column":184}},{"source":"../../../src/spec/toplevel.ts","name":null,"original":{"line":69,"column":9},"generated":{"line":1,"column":187}},{"source":"../../../src/spec/toplevel.ts","name":null,"original":{"line":69,"column":26},"generated":{"line":1,"column":193}},{"source":"../../../src/spec/toplevel.ts","name":null,"original":{"line":69,"column":9},"generated":{"line":1,"column":201}},{"source":"../../../src/spec/toplevel.ts","name":null,"original":{"line":69,"column":52},"generated":{"line":1,"column":204}},{"source":"../../../src/spec/toplevel.ts","name":null,"original":{"line":69,"column":35},"generated":{"line":1,"column":214}},{"source":"../../../src/spec/toplevel.ts","name":null,"original":{"line":69,"column":80},"generated":{"line":1,"column":217}},{"source":"../../../src/spec/toplevel.ts","name":null,"original":{"line":69,"column":63},"generated":{"line":1,"column":227}},{"source":"../../../src/spec/toplevel.ts","name":null,"original":{"line":72,"column":6},"generated":{"line":1,"column":229}},{"source":"../../../src/spec/toplevel.ts","name":null,"original":{"line":72,"column":16},"generated":{"line":1,"column":238}},{"source":"../../../src/spec/toplevel.ts","name":null,"original":{"line":72,"column":27},"generated":{"line":1,"column":240}},{"source":"../../../src/spec/toplevel.ts","name":null,"original":{"line":73,"column":9},"generated":{"line":1,"column":243}},{"source":"../../../src/spec/toplevel.ts","name":null,"original":{"line":73,"column":9},"generated":{"line":1,"column":250}},{"source":"../../../src/spec/toplevel.ts","name":null,"original":{"line":73,"column":28},"generated":{"line":1,"column":260}},{"source":"../../../src/spec/toplevel.ts","name":null,"original":{"line":73,"column":52},"generated":{"line":1,"column":262}},{"source":"../../../src/spec/toplevel.ts","name":null,"original":{"line":73,"column":52},"generated":{"line":1,"column":264}},{"source":"../../../src/spec/toplevel.ts","name":null,"original":{"line":73,"column":52},"generated":{"line":1,"column":289}},{"source":"../../../src/spec/toplevel.ts","name":null,"original":{"line":73,"column":78},"generated":{"line":1,"column":294}},{"source":"../../../src/spec/toplevel.ts","name":null,"original":{"line":101,"column":0},"generated":{"line":1,"column":300}},{"source":"../../../src/spec/toplevel.ts","name":null,"original":{"line":101,"column":6},"generated":{"line":1,"column":306}},{"source":"../../../src/spec/toplevel.ts","name":null,"original":{"line":101,"column":59},"generated":{"line":1,"column":308}},{"source":"../../../src/spec/toplevel.ts","name":null,"original":{"line":102,"column":2},"generated":{"line":1,"column":309}},{"source":"../../../src/spec/toplevel.ts","name":null,"original":{"line":103,"column":2},"generated":{"line":1,"column":322}},{"source":"../../../src/spec/toplevel.ts","name":null,"original":{"line":107,"column":6},"generated":{"line":1,"column":333}},{"source":"../../../src/spec/toplevel.ts","name":null,"original":{"line":107,"column":16},"generated":{"line":1,"column":342}},{"source":"../../../src/spec/toplevel.ts","name":null,"original":{"line":107,"column":72},"generated":{"line":1,"column":344}},{"source":"../../../src/spec/toplevel.ts","name":null,"original":{"line":108,"column":9},"generated":{"line":1,"column":347}},{"source":"../../../src/spec/toplevel.ts","name":null,"original":{"line":108,"column":9},"generated":{"line":1,"column":354}},{"source":"../../../src/spec/toplevel.ts","name":null,"original":{"line":108,"column":30},"generated":{"line":1,"column":356}},{"source":"../../../src/spec/toplevel.ts","name":null,"original":{"line":108,"column":37},"generated":{"line":1,"column":363}},{"source":"../../../src/spec/toplevel.ts","name":null,"original":{"line":108,"column":38},"generated":{"line":1,"column":364}},{"source":"../../../src/spec/toplevel.ts","name":null,"original":{"line":108,"column":41},"generated":{"line":1,"column":366}},{"source":"../../../src/spec/toplevel.ts","name":null,"original":{"line":109,"column":8},"generated":{"line":1,"column":371}},{"source":"../../../src/spec/toplevel.ts","name":null,"original":{"line":109,"column":22},"generated":{"line":1,"column":379}},{"source":"../../../src/spec/toplevel.ts","name":null,"original":{"line":109,"column":13},"generated":{"line":1,"column":383}},{"source":"../../../src/spec/toplevel.ts","name":null,"original":{"line":109,"column":15},"generated":{"line":1,"column":385}},{"source":"../../../src/spec/toplevel.ts","name":null,"original":{"line":110,"column":6},"generated":{"line":1,"column":390}},{"source":"../../../src/spec/toplevel.ts","name":null,"original":{"line":110,"column":8},"generated":{"line":1,"column":392}},{"source":"../../../src/spec/toplevel.ts","name":null,"original":{"line":110,"column":13},"generated":{"line":1,"column":395}},{"source":"../../../src/spec/toplevel.ts","name":null,"original":{"line":110,"column":15},"generated":{"line":1,"column":397}},{"source":"../../../src/spec/toplevel.ts","name":null,"original":{"line":112,"column":11},"generated":{"line":1,"column":401}},{"source":"../../../src/spec/toplevel.ts","name":null,"original":{"line":113,"column":5},"generated":{"line":1,"column":404}}],"sources":{"../../../src/spec/toplevel.ts":"import {Color, SignalRef} from 'vega';\nimport {BaseSpec} from '.';\nimport {getPositionScaleChannel} from '../channel';\nimport {Config} from '../config';\nimport {InlineDataset} from '../data';\nimport {Dict} from '../util';\n\n/**\n * @minimum 0\n */\nexport type Padding = number | {top?: number; bottom?: number; left?: number; right?: number};\n\nexport type Datasets = Dict<InlineDataset>;\n\nexport type TopLevel<S extends BaseSpec> = S &\n  TopLevelProperties & {\n    /**\n     * URL to [JSON schema](http://json-schema.org/) for a Vega-Lite specification. Unless you have a reason to change this, use `https://vega.github.io/schema/vega-lite/v4.json`. Setting the `$schema` property allows automatic validation and autocomplete in editors that support JSON schema.\n     * @format uri\n     */\n    $schema?: string;\n\n    /**\n     * Vega-Lite configuration object. This property can only be defined at the top-level of a specification.\n     */\n    config?: Config;\n\n    /**\n     * A global data store for named datasets. This is a mapping from names to inline datasets.\n     * This can be an array of objects or primitive values or a string. Arrays of primitive values are ingested as objects with a `data` property.\n     */\n    datasets?: Datasets;\n\n    /**\n     * Optional metadata that will be passed to Vega.\n     * This object is completely ignored by Vega and Vega-Lite and can be used for custom metadata.\n     */\n    usermeta?: Dict<unknown>;\n  };\n\nexport interface TopLevelProperties {\n  /**\n   * CSS color property to use as the background of the entire view.\n   *\n   * __Default value:__ `\"white\"`\n   */\n  background?: Color | SignalRef;\n\n  /**\n   * The default visualization padding, in pixels, from the edge of the visualization canvas to the data rectangle. If a number, specifies padding for all sides.\n   * If an object, the value should have the format `{\"left\": 5, \"top\": 5, \"right\": 5, \"bottom\": 5}` to specify padding for each side of the visualization.\n   *\n   * __Default value__: `5`\n   */\n  padding?: Padding | SignalRef;\n\n  /**\n   * How the visualization size should be determined. If a string, should be one of `\"pad\"`, `\"fit\"` or `\"none\"`.\n   * Object values can additionally specify parameters for content sizing and automatic resizing.\n   *\n   * __Default value__: `pad`\n   */\n  autosize?: AutosizeType | AutoSizeParams; // Vega actually supports signal for autosize. However, we need to check autosize at compile time to infer the rest of the spec. Thus VL's autosize won't support SignalRef for now.\n}\n\nexport type FitType = 'fit' | 'fit-x' | 'fit-y';\n\nexport function isFitType(autoSizeType: AutosizeType): autoSizeType is FitType {\n  return autoSizeType === 'fit' || autoSizeType === 'fit-x' || autoSizeType === 'fit-y';\n}\n\nexport function getFitType(sizeType?: 'width' | 'height'): FitType {\n  return sizeType ? (`fit-${getPositionScaleChannel(sizeType)}` as FitType) : 'fit';\n}\n\nexport type AutosizeType = 'pad' | 'none' | 'fit' | 'fit-x' | 'fit-y';\n\nexport interface AutoSizeParams {\n  /**\n   * The sizing format type. One of `\"pad\"`, `\"fit\"`, `\"fit-x\"`, `\"fit-y\"`,  or `\"none\"`. See the [autosize type](https://vega.github.io/vega-lite/docs/size.html#autosize) documentation for descriptions of each.\n   *\n   * __Default value__: `\"pad\"`\n   */\n  type?: AutosizeType;\n\n  /**\n   * A boolean flag indicating if autosize layout should be re-calculated on every view update.\n   *\n   * __Default value__: `false`\n   */\n  resize?: boolean;\n\n  /**\n   * Determines how size calculation should be performed, one of `\"content\"` or `\"padding\"`. The default setting (`\"content\"`) interprets the width and height settings as the data rectangle (plotting) dimensions, to which padding is then added. In contrast, the `\"padding\"` setting includes the padding within the view size calculations, such that the width and height settings indicate the **total** intended size of the view.\n   *\n   * __Default value__: `\"content\"`\n   */\n  contains?: 'content' | 'padding';\n}\n\nconst TOP_LEVEL_PROPERTIES: (keyof TopLevelProperties)[] = [\n  'background',\n  'padding'\n  // We do not include \"autosize\" here as it is supported by only unit and layer specs and thus need to be normalized\n];\n\nexport function extractTopLevelProperties<T extends TopLevelProperties>(t: T) {\n  return TOP_LEVEL_PROPERTIES.reduce((o, p) => {\n    if (t && t[p] !== undefined) {\n      o[p] = t[p];\n    }\n    return o;\n  }, {});\n}\n"},"lineCount":null}},"error":null,"hash":"cc3e824cd665fdab89a41f91f392d3f6","cacheData":{"env":{}}}