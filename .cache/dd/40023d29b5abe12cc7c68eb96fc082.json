{"id":"rN2O","dependencies":[{"name":"/home/toltm/data-viz/temperature/node_modules/vega-lite/build/src/spec/unit.js.map","includedInParent":true,"mtime":499162500000},{"name":"/home/toltm/data-viz/temperature/node_modules/vega-lite/src/spec/unit.ts","includedInParent":true,"mtime":499162500000},{"name":"/home/toltm/data-viz/temperature/package.json","includedInParent":true,"mtime":1591974472658},{"name":"/home/toltm/data-viz/temperature/node_modules/vega-lite/build/package.json","includedInParent":true,"mtime":499162500000}],"generated":{"js":"\"use strict\";function e(e){return\"mark\"in e}Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.isUnitSpec=e;"},"sourceMaps":{"js":{"mappings":[{"source":"../../../src/spec/unit.ts","name":null,"original":{"line":68,"column":1},"generated":{"line":1,"column":0}},{"source":"../../../src/spec/unit.ts","name":null,"original":{"line":66,"column":6},"generated":{"line":1,"column":13}},{"source":"../../../src/spec/unit.ts","name":null,"original":{"line":66,"column":16},"generated":{"line":1,"column":22}},{"source":"../../../src/spec/unit.ts","name":null,"original":{"line":66,"column":27},"generated":{"line":1,"column":24}},{"source":"../../../src/spec/unit.ts","name":null,"original":{"line":67,"column":9},"generated":{"line":1,"column":27}},{"source":"../../../src/spec/unit.ts","name":null,"original":{"line":67,"column":9},"generated":{"line":1,"column":33}},{"source":"../../../src/spec/unit.ts","name":null,"original":{"line":67,"column":19},"generated":{"line":1,"column":42}},{"source":"../../../src/spec/unit.ts","name":null,"original":{"line":68,"column":1},"generated":{"line":1,"column":44}},{"source":"../../../src/spec/unit.ts","name":null,"original":{"line":68,"column":1},"generated":{"line":1,"column":51}},{"source":"../../../src/spec/unit.ts","name":null,"original":{"line":68,"column":1},"generated":{"line":1,"column":66}},{"source":"../../../src/spec/unit.ts","name":null,"original":{"line":68,"column":1},"generated":{"line":1,"column":74}},{"source":"../../../src/spec/unit.ts","name":null,"original":{"line":68,"column":1},"generated":{"line":1,"column":87}},{"source":"../../../src/spec/unit.ts","name":null,"original":{"line":68,"column":1},"generated":{"line":1,"column":88}},{"source":"../../../src/spec/unit.ts","name":null,"original":{"line":68,"column":1},"generated":{"line":1,"column":95}},{"source":"../../../src/spec/unit.ts","name":null,"original":{"line":68,"column":1},"generated":{"line":1,"column":99}},{"source":"../../../src/spec/unit.ts","name":null,"original":{"line":68,"column":1},"generated":{"line":1,"column":107}},{"source":"../../../src/spec/unit.ts","name":null,"original":{"line":68,"column":1},"generated":{"line":1,"column":118}}],"sources":{"../../../src/spec/unit.ts":"import {FieldName} from '../channeldef';\nimport {CompositeEncoding, FacetedCompositeEncoding} from '../compositemark';\nimport {Encoding} from '../encoding';\nimport {AnyMark, Mark, MarkDef} from '../mark';\nimport {Projection} from '../projection';\nimport {SelectionDef} from '../selection';\nimport {\n  BaseSpec,\n  DataMixins,\n  DeprecatedFrameMixins,\n  FrameMixins,\n  GenericCompositionLayout,\n  ResolveMixins\n} from './base';\nimport {TopLevel} from './toplevel';\n\n/**\n * Base interface for a unit (single-view) specification.\n */\nexport interface GenericUnitSpec<E extends Encoding<any>, M> extends BaseSpec {\n  /**\n   * A string describing the mark type (one of `\"bar\"`, `\"circle\"`, `\"square\"`, `\"tick\"`, `\"line\"`,\n   * `\"area\"`, `\"point\"`, `\"rule\"`, `\"geoshape\"`, and `\"text\"`) or a [mark definition object](https://vega.github.io/vega-lite/docs/mark.html#mark-def).\n   */\n  mark: M;\n\n  /**\n   * A key-value mapping between encoding channels and definition of fields.\n   */\n  encoding?: E;\n\n  /**\n   * An object defining properties of geographic projection, which will be applied to `shape` path for `\"geoshape\"` marks\n   * and to `latitude` and `\"longitude\"` channels for other marks.\n   */\n  projection?: Projection;\n\n  /**\n   * A key-value mapping between selection names and definitions.\n   */\n  selection?: Record<string, SelectionDef>;\n}\n\n/**\n * A unit specification without any shortcut/expansion syntax.\n */\nexport type NormalizedUnitSpec = GenericUnitSpec<Encoding<FieldName>, Mark | MarkDef>;\n\n/**\n * A unit specification, which can contain either [primitive marks or composite marks](https://vega.github.io/vega-lite/docs/mark.html#types).\n */\nexport type UnitSpec = GenericUnitSpec<CompositeEncoding, AnyMark> & DeprecatedFrameMixins;\n\nexport type UnitSpecWithFrame = GenericUnitSpec<CompositeEncoding, AnyMark> & FrameMixins;\n\n/**\n * Unit spec that can have a composite mark and row or column channels (shorthand for a facet spec).\n */\nexport type FacetedUnitSpec = GenericUnitSpec<FacetedCompositeEncoding, AnyMark> &\n  ResolveMixins &\n  GenericCompositionLayout &\n  FrameMixins;\n\nexport type TopLevelUnitSpec = TopLevel<FacetedUnitSpec> & DataMixins;\n\nexport function isUnitSpec(spec: BaseSpec): spec is FacetedUnitSpec | NormalizedUnitSpec {\n  return 'mark' in spec;\n}\n"},"lineCount":null}},"error":null,"hash":"2a0c6cea291393e61e1f112ba1130b19","cacheData":{"env":{}}}