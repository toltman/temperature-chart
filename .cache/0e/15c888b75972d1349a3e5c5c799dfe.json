{"id":"jvCX","dependencies":[{"name":"/home/toltm/data-viz/temperature/package.json","includedInParent":true,"mtime":1591977532257},{"name":"/home/toltm/data-viz/temperature/node_modules/vega-dataflow/package.json","includedInParent":true,"mtime":1591969205136}],"generated":{"js":"\"use strict\";async function e(e,t){try{await t(e)}catch(r){e.error(r)}}Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.default=e;"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/vega-dataflow/src/util/asyncCallback.js","original":{"line":11,"column":1},"generated":{"line":1,"column":0}},{"source":"node_modules/vega-dataflow/src/util/asyncCallback.js","original":{"line":9,"column":15},"generated":{"line":1,"column":13}},{"source":"node_modules/vega-dataflow/src/util/asyncCallback.js","name":"df","original":{"line":9,"column":30},"generated":{"line":1,"column":28}},{"source":"node_modules/vega-dataflow/src/util/asyncCallback.js","name":"df","original":{"line":9,"column":30},"generated":{"line":1,"column":30}},{"source":"node_modules/vega-dataflow/src/util/asyncCallback.js","name":"callback","original":{"line":9,"column":34},"generated":{"line":1,"column":32}},{"source":"node_modules/vega-dataflow/src/util/asyncCallback.js","original":{"line":10,"column":6},"generated":{"line":1,"column":35}},{"source":"node_modules/vega-dataflow/src/util/asyncCallback.js","name":"callback","original":{"line":10,"column":14},"generated":{"line":1,"column":45}},{"source":"node_modules/vega-dataflow/src/util/asyncCallback.js","name":"df","original":{"line":10,"column":23},"generated":{"line":1,"column":47}},{"source":"node_modules/vega-dataflow/src/util/asyncCallback.js","original":{"line":10,"column":30},"generated":{"line":1,"column":50}},{"source":"node_modules/vega-dataflow/src/util/asyncCallback.js","name":"err","original":{"line":10,"column":37},"generated":{"line":1,"column":56}},{"source":"node_modules/vega-dataflow/src/util/asyncCallback.js","name":"df","original":{"line":10,"column":44},"generated":{"line":1,"column":59}},{"source":"node_modules/vega-dataflow/src/util/asyncCallback.js","name":"error","original":{"line":10,"column":47},"generated":{"line":1,"column":61}},{"source":"node_modules/vega-dataflow/src/util/asyncCallback.js","name":"err","original":{"line":10,"column":53},"generated":{"line":1,"column":67}},{"source":"node_modules/vega-dataflow/src/util/asyncCallback.js","original":{"line":11,"column":1},"generated":{"line":1,"column":71}},{"source":"node_modules/vega-dataflow/src/util/asyncCallback.js","original":{"line":11,"column":1},"generated":{"line":1,"column":78}},{"source":"node_modules/vega-dataflow/src/util/asyncCallback.js","original":{"line":11,"column":1},"generated":{"line":1,"column":93}},{"source":"node_modules/vega-dataflow/src/util/asyncCallback.js","original":{"line":11,"column":1},"generated":{"line":1,"column":101}},{"source":"node_modules/vega-dataflow/src/util/asyncCallback.js","original":{"line":11,"column":1},"generated":{"line":1,"column":114}},{"source":"node_modules/vega-dataflow/src/util/asyncCallback.js","original":{"line":11,"column":1},"generated":{"line":1,"column":115}},{"source":"node_modules/vega-dataflow/src/util/asyncCallback.js","original":{"line":11,"column":1},"generated":{"line":1,"column":122}},{"source":"node_modules/vega-dataflow/src/util/asyncCallback.js","original":{"line":11,"column":1},"generated":{"line":1,"column":126}},{"source":"node_modules/vega-dataflow/src/util/asyncCallback.js","original":{"line":11,"column":1},"generated":{"line":1,"column":134}},{"source":"node_modules/vega-dataflow/src/util/asyncCallback.js","original":{"line":11,"column":1},"generated":{"line":1,"column":142}}],"sources":{"node_modules/vega-dataflow/src/util/asyncCallback.js":"/**\n * Invoke and await a potentially async callback function. If\n * an error occurs, trap it and route to Dataflow.error.\n * @param {Dataflow} df - The dataflow instance\n * @param {function} callback - A callback function to invoke\n *   and then await. The dataflow will be passed as the single\n *   argument to the function.\n */\nexport default async function(df, callback) {\n  try { await callback(df); } catch (err) { df.error(err); }\n}\n"},"lineCount":null}},"error":null,"hash":"3039a937725d8924066ea51289d63cd2","cacheData":{"env":{}}}