{"id":"cyXc","dependencies":[{"name":"/home/toltm/data-viz/temperature/node_modules/vega-lite/build/src/data.js.map","includedInParent":true,"mtime":499162500000},{"name":"/home/toltm/data-viz/temperature/node_modules/vega-lite/src/data.ts","includedInParent":true,"mtime":499162500000},{"name":"/home/toltm/data-viz/temperature/package.json","includedInParent":true,"mtime":1591977532257},{"name":"/home/toltm/data-viz/temperature/node_modules/vega-lite/build/package.json","includedInParent":true,"mtime":499162500000}],"generated":{"js":"\"use strict\";function e(e){return\"url\"in e}function r(e){return\"values\"in e}function t(t){return\"name\"in t&&!e(t)&&!r(t)&&!n(t)}function n(e){return e&&(o(e)||i(e)||s(e))}function o(e){return\"sequence\"in e}function i(e){return\"sphere\"in e}function s(e){return\"graticule\"in e}Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.isUrlData=e,exports.isInlineData=r,exports.isNamedData=t,exports.isGenerator=n,exports.isSequenceGenerator=o,exports.isSphereGenerator=i,exports.isGraticuleGenerator=s,exports.RAW=exports.MAIN=void 0;const u=\"main\";exports.MAIN=u;const a=\"raw\";exports.RAW=a;"},"sourceMaps":{"js":{"mappings":[{"source":"../../src/data.ts","name":null,"original":{"line":154,"column":7},"generated":{"line":1,"column":0}},{"source":"../../src/data.ts","name":null,"original":{"line":123,"column":6},"generated":{"line":1,"column":13}},{"source":"../../src/data.ts","name":null,"original":{"line":123,"column":16},"generated":{"line":1,"column":22}},{"source":"../../src/data.ts","name":null,"original":{"line":123,"column":26},"generated":{"line":1,"column":24}},{"source":"../../src/data.ts","name":null,"original":{"line":124,"column":9},"generated":{"line":1,"column":27}},{"source":"../../src/data.ts","name":null,"original":{"line":124,"column":9},"generated":{"line":1,"column":33}},{"source":"../../src/data.ts","name":null,"original":{"line":124,"column":18},"generated":{"line":1,"column":41}},{"source":"../../src/data.ts","name":null,"original":{"line":127,"column":6},"generated":{"line":1,"column":43}},{"source":"../../src/data.ts","name":null,"original":{"line":127,"column":16},"generated":{"line":1,"column":52}},{"source":"../../src/data.ts","name":null,"original":{"line":127,"column":29},"generated":{"line":1,"column":54}},{"source":"../../src/data.ts","name":null,"original":{"line":128,"column":9},"generated":{"line":1,"column":57}},{"source":"../../src/data.ts","name":null,"original":{"line":128,"column":9},"generated":{"line":1,"column":63}},{"source":"../../src/data.ts","name":null,"original":{"line":128,"column":21},"generated":{"line":1,"column":74}},{"source":"../../src/data.ts","name":null,"original":{"line":131,"column":6},"generated":{"line":1,"column":76}},{"source":"../../src/data.ts","name":null,"original":{"line":131,"column":16},"generated":{"line":1,"column":85}},{"source":"../../src/data.ts","name":null,"original":{"line":131,"column":28},"generated":{"line":1,"column":87}},{"source":"../../src/data.ts","name":null,"original":{"line":132,"column":9},"generated":{"line":1,"column":90}},{"source":"../../src/data.ts","name":null,"original":{"line":132,"column":9},"generated":{"line":1,"column":96}},{"source":"../../src/data.ts","name":null,"original":{"line":132,"column":19},"generated":{"line":1,"column":105}},{"source":"../../src/data.ts","name":null,"original":{"line":132,"column":28},"generated":{"line":1,"column":109}},{"source":"../../src/data.ts","name":null,"original":{"line":132,"column":38},"generated":{"line":1,"column":111}},{"source":"../../src/data.ts","name":null,"original":{"line":132,"column":48},"generated":{"line":1,"column":116}},{"source":"../../src/data.ts","name":null,"original":{"line":132,"column":61},"generated":{"line":1,"column":118}},{"source":"../../src/data.ts","name":null,"original":{"line":132,"column":71},"generated":{"line":1,"column":123}},{"source":"../../src/data.ts","name":null,"original":{"line":132,"column":83},"generated":{"line":1,"column":125}},{"source":"../../src/data.ts","name":null,"original":{"line":135,"column":6},"generated":{"line":1,"column":128}},{"source":"../../src/data.ts","name":null,"original":{"line":135,"column":16},"generated":{"line":1,"column":137}},{"source":"../../src/data.ts","name":null,"original":{"line":135,"column":28},"generated":{"line":1,"column":139}},{"source":"../../src/data.ts","name":null,"original":{"line":136,"column":9},"generated":{"line":1,"column":142}},{"source":"../../src/data.ts","name":null,"original":{"line":136,"column":9},"generated":{"line":1,"column":149}},{"source":"../../src/data.ts","name":null,"original":{"line":136,"column":18},"generated":{"line":1,"column":153}},{"source":"../../src/data.ts","name":null,"original":{"line":136,"column":38},"generated":{"line":1,"column":155}},{"source":"../../src/data.ts","name":null,"original":{"line":136,"column":47},"generated":{"line":1,"column":159}},{"source":"../../src/data.ts","name":null,"original":{"line":136,"column":65},"generated":{"line":1,"column":161}},{"source":"../../src/data.ts","name":null,"original":{"line":136,"column":74},"generated":{"line":1,"column":165}},{"source":"../../src/data.ts","name":null,"original":{"line":136,"column":95},"generated":{"line":1,"column":167}},{"source":"../../src/data.ts","name":null,"original":{"line":139,"column":6},"generated":{"line":1,"column":171}},{"source":"../../src/data.ts","name":null,"original":{"line":139,"column":16},"generated":{"line":1,"column":180}},{"source":"../../src/data.ts","name":null,"original":{"line":139,"column":36},"generated":{"line":1,"column":182}},{"source":"../../src/data.ts","name":null,"original":{"line":140,"column":9},"generated":{"line":1,"column":185}},{"source":"../../src/data.ts","name":null,"original":{"line":140,"column":9},"generated":{"line":1,"column":191}},{"source":"../../src/data.ts","name":null,"original":{"line":140,"column":23},"generated":{"line":1,"column":204}},{"source":"../../src/data.ts","name":null,"original":{"line":143,"column":6},"generated":{"line":1,"column":206}},{"source":"../../src/data.ts","name":null,"original":{"line":143,"column":16},"generated":{"line":1,"column":215}},{"source":"../../src/data.ts","name":null,"original":{"line":143,"column":34},"generated":{"line":1,"column":217}},{"source":"../../src/data.ts","name":null,"original":{"line":144,"column":9},"generated":{"line":1,"column":220}},{"source":"../../src/data.ts","name":null,"original":{"line":144,"column":9},"generated":{"line":1,"column":226}},{"source":"../../src/data.ts","name":null,"original":{"line":144,"column":21},"generated":{"line":1,"column":237}},{"source":"../../src/data.ts","name":null,"original":{"line":147,"column":6},"generated":{"line":1,"column":239}},{"source":"../../src/data.ts","name":null,"original":{"line":147,"column":16},"generated":{"line":1,"column":248}},{"source":"../../src/data.ts","name":null,"original":{"line":147,"column":37},"generated":{"line":1,"column":250}},{"source":"../../src/data.ts","name":null,"original":{"line":148,"column":9},"generated":{"line":1,"column":253}},{"source":"../../src/data.ts","name":null,"original":{"line":148,"column":9},"generated":{"line":1,"column":259}},{"source":"../../src/data.ts","name":null,"original":{"line":148,"column":24},"generated":{"line":1,"column":273}},{"source":"../../src/data.ts","name":null,"original":{"line":154,"column":7},"generated":{"line":1,"column":275}},{"source":"../../src/data.ts","name":null,"original":{"line":154,"column":7},"generated":{"line":1,"column":282}},{"source":"../../src/data.ts","name":null,"original":{"line":154,"column":7},"generated":{"line":1,"column":297}},{"source":"../../src/data.ts","name":null,"original":{"line":154,"column":7},"generated":{"line":1,"column":305}},{"source":"../../src/data.ts","name":null,"original":{"line":154,"column":7},"generated":{"line":1,"column":318}},{"source":"../../src/data.ts","name":null,"original":{"line":154,"column":7},"generated":{"line":1,"column":319}},{"source":"../../src/data.ts","name":null,"original":{"line":154,"column":7},"generated":{"line":1,"column":326}},{"source":"../../src/data.ts","name":null,"original":{"line":154,"column":7},"generated":{"line":1,"column":330}},{"source":"../../src/data.ts","name":null,"original":{"line":154,"column":7},"generated":{"line":1,"column":338}},{"source":"../../src/data.ts","name":null,"original":{"line":154,"column":7},"generated":{"line":1,"column":348}},{"source":"../../src/data.ts","name":null,"original":{"line":154,"column":7},"generated":{"line":1,"column":350}},{"source":"../../src/data.ts","name":null,"original":{"line":154,"column":7},"generated":{"line":1,"column":358}},{"source":"../../src/data.ts","name":null,"original":{"line":154,"column":7},"generated":{"line":1,"column":371}},{"source":"../../src/data.ts","name":null,"original":{"line":154,"column":7},"generated":{"line":1,"column":373}},{"source":"../../src/data.ts","name":null,"original":{"line":154,"column":7},"generated":{"line":1,"column":381}},{"source":"../../src/data.ts","name":null,"original":{"line":154,"column":7},"generated":{"line":1,"column":393}},{"source":"../../src/data.ts","name":null,"original":{"line":154,"column":7},"generated":{"line":1,"column":395}},{"source":"../../src/data.ts","name":null,"original":{"line":154,"column":7},"generated":{"line":1,"column":403}},{"source":"../../src/data.ts","name":null,"original":{"line":154,"column":7},"generated":{"line":1,"column":415}},{"source":"../../src/data.ts","name":null,"original":{"line":154,"column":7},"generated":{"line":1,"column":417}},{"source":"../../src/data.ts","name":null,"original":{"line":154,"column":7},"generated":{"line":1,"column":425}},{"source":"../../src/data.ts","name":null,"original":{"line":154,"column":7},"generated":{"line":1,"column":445}},{"source":"../../src/data.ts","name":null,"original":{"line":154,"column":7},"generated":{"line":1,"column":447}},{"source":"../../src/data.ts","name":null,"original":{"line":154,"column":7},"generated":{"line":1,"column":455}},{"source":"../../src/data.ts","name":null,"original":{"line":154,"column":7},"generated":{"line":1,"column":473}},{"source":"../../src/data.ts","name":null,"original":{"line":154,"column":7},"generated":{"line":1,"column":475}},{"source":"../../src/data.ts","name":null,"original":{"line":154,"column":7},"generated":{"line":1,"column":483}},{"source":"../../src/data.ts","name":null,"original":{"line":154,"column":7},"generated":{"line":1,"column":504}},{"source":"../../src/data.ts","name":null,"original":{"line":154,"column":7},"generated":{"line":1,"column":506}},{"source":"../../src/data.ts","name":null,"original":{"line":154,"column":7},"generated":{"line":1,"column":514}},{"source":"../../src/data.ts","name":null,"original":{"line":154,"column":7},"generated":{"line":1,"column":518}},{"source":"../../src/data.ts","name":null,"original":{"line":154,"column":7},"generated":{"line":1,"column":526}},{"source":"../../src/data.ts","name":null,"original":{"line":154,"column":7},"generated":{"line":1,"column":536}},{"source":"../../src/data.ts","name":null,"original":{"line":153,"column":7},"generated":{"line":1,"column":538}},{"source":"../../src/data.ts","name":null,"original":{"line":153,"column":13},"generated":{"line":1,"column":544}},{"source":"../../src/data.ts","name":null,"original":{"line":153,"column":20},"generated":{"line":1,"column":546}},{"source":"../../src/data.ts","name":null,"original":{"line":154,"column":7},"generated":{"line":1,"column":553}},{"source":"../../src/data.ts","name":null,"original":{"line":154,"column":7},"generated":{"line":1,"column":561}},{"source":"../../src/data.ts","name":null,"original":{"line":154,"column":7},"generated":{"line":1,"column":566}},{"source":"../../src/data.ts","name":null,"original":{"line":154,"column":7},"generated":{"line":1,"column":568}},{"source":"../../src/data.ts","name":null,"original":{"line":154,"column":13},"generated":{"line":1,"column":574}},{"source":"../../src/data.ts","name":null,"original":{"line":154,"column":19},"generated":{"line":1,"column":576}},{"source":"../../src/data.ts","name":null,"original":{"line":154,"column":7},"generated":{"line":1,"column":582}},{"source":"../../src/data.ts","name":null,"original":{"line":154,"column":7},"generated":{"line":1,"column":590}},{"source":"../../src/data.ts","name":null,"original":{"line":154,"column":7},"generated":{"line":1,"column":594}}],"sources":{"../../src/data.ts":"import {Dict} from './util';\n/*\n * Constants and utilities for data.\n */\nimport {Vector2} from 'vega';\nimport {FieldName} from './channeldef';\nimport {VgData} from './vega.schema';\n\nexport type ParseValue = null | string | 'string' | 'boolean' | 'date' | 'number';\n\nexport interface Parse {\n  [field: string]: ParseValue;\n}\n\nexport interface DataFormatBase {\n  /**\n   * If set to `null`, disable type inference based on the spec and only use type inference based on the data.\n   * Alternatively, a parsing directive object can be provided for explicit data types. Each property of the object corresponds to a field name, and the value to the desired data type (one of `\"number\"`, `\"boolean\"`, `\"date\"`, or null (do not parse the field)).\n   * For example, `\"parse\": {\"modified_on\": \"date\"}` parses the `modified_on` field in each input record a Date value.\n   *\n   * For `\"date\"`, we parse data based using Javascript's [`Date.parse()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse).\n   * For Specific date formats can be provided (e.g., `{foo: \"date:'%m%d%Y'\"}`), using the [d3-time-format syntax](https://github.com/d3/d3-time-format#locale_format). UTC date format parsing is supported similarly (e.g., `{foo: \"utc:'%m%d%Y'\"}`). See more about [UTC time](https://vega.github.io/vega-lite/docs/timeunit.html#utc)\n   */\n  parse?: Parse | null;\n\n  /**\n   * Type of input data: `\"json\"`, `\"csv\"`, `\"tsv\"`, `\"dsv\"`.\n   *\n   * __Default value:__  The default format type is determined by the extension of the file URL.\n   * If no extension is detected, `\"json\"` will be used by default.\n   */\n  type?: 'csv' | 'tsv' | 'dsv' | 'json' | 'topojson';\n}\n\nexport interface CsvDataFormat extends DataFormatBase {\n  type?: 'csv' | 'tsv';\n}\n\nexport interface DsvDataFormat extends DataFormatBase {\n  type?: 'dsv';\n\n  /**\n   * The delimiter between records. The delimiter must be a single character (i.e., a single 16-bit code unit); so, ASCII delimiters are fine, but emoji delimiters are not.\n   *\n   * @minLength 1\n   * @maxLength 1\n   */\n  delimiter: string;\n}\n\nexport interface JsonDataFormat extends DataFormatBase {\n  type?: 'json';\n  /**\n   * The JSON property containing the desired data.\n   * This parameter can be used when the loaded JSON file may have surrounding structure or meta-data.\n   * For example `\"property\": \"values.features\"` is equivalent to retrieving `json.values.features`\n   * from the loaded JSON object.\n   */\n  property?: string;\n}\n\nexport interface TopoDataFormat extends DataFormatBase {\n  type?: 'topojson';\n  /**\n   * The name of the TopoJSON object set to convert to a GeoJSON feature collection.\n   * For example, in a map of the world, there may be an object set named `\"countries\"`.\n   * Using the feature property, we can extract this set and generate a GeoJSON feature object for each country.\n   */\n  feature?: string;\n  /**\n   * The name of the TopoJSON object set to convert to mesh.\n   * Similar to the `feature` option, `mesh` extracts a named TopoJSON object set.\n   *  Unlike the `feature` option, the corresponding geo data is returned as a single, unified mesh instance, not as individual GeoJSON features.\n   * Extracting a mesh is useful for more efficiently drawing borders or other geographic elements that you do not need to associate with specific regions such as individual countries, states or counties.\n   */\n  mesh?: string;\n}\n\nexport type DataFormat = CsvDataFormat | DsvDataFormat | JsonDataFormat | TopoDataFormat;\n\nexport type DataFormatType = 'json' | 'csv' | 'tsv' | 'dsv' | 'topojson';\n\nexport type DataSource = UrlData | InlineData | NamedData;\n\nexport type Data = DataSource | Generator;\n\nexport type InlineDataset = number[] | string[] | boolean[] | Dict<unknown>[] | string | Dict<unknown>;\n\nexport interface DataBase {\n  /**\n   * An object that specifies the format for parsing the data.\n   */\n  format?: DataFormat;\n  /**\n   * Provide a placeholder name and bind data at runtime.\n   */\n  name?: string;\n}\n\nexport interface UrlData extends DataBase {\n  /**\n   * An URL from which to load the data set. Use the `format.type` property\n   * to ensure the loaded data is correctly parsed.\n   */\n  url: string;\n}\n\nexport interface InlineData extends DataBase {\n  /**\n   * The full data set, included inline. This can be an array of objects or primitive values, an object, or a string.\n   * Arrays of primitive values are ingested as objects with a `data` property. Strings are parsed according to the specified format type.\n   */\n  values: InlineDataset;\n}\n\nexport interface NamedData extends DataBase {\n  /**\n   * Provide a placeholder name and bind data at runtime.\n   */\n  name: string;\n}\n\nexport function isUrlData(data: Partial<Data> | Partial<VgData>): data is UrlData {\n  return 'url' in data;\n}\n\nexport function isInlineData(data: Partial<Data> | Partial<VgData>): data is InlineData {\n  return 'values' in data;\n}\n\nexport function isNamedData(data: Partial<Data> | Partial<VgData>): data is NamedData {\n  return 'name' in data && !isUrlData(data) && !isInlineData(data) && !isGenerator(data);\n}\n\nexport function isGenerator(data: Partial<Data> | Partial<VgData>): data is Generator {\n  return data && (isSequenceGenerator(data) || isSphereGenerator(data) || isGraticuleGenerator(data));\n}\n\nexport function isSequenceGenerator(data: Partial<Data> | Partial<VgData>): data is SequenceGenerator {\n  return 'sequence' in data;\n}\n\nexport function isSphereGenerator(data: Partial<Data> | Partial<VgData>): data is SphereGenerator {\n  return 'sphere' in data;\n}\n\nexport function isGraticuleGenerator(data: Partial<Data> | Partial<VgData>): data is GraticuleGenerator {\n  return 'graticule' in data;\n}\n\nexport type DataSourceType = 'raw' | 'main' | 'row' | 'column' | 'lookup';\n\nexport const MAIN = 'main' as const;\nexport const RAW = 'raw' as const;\n\nexport type Generator = SequenceGenerator | SphereGenerator | GraticuleGenerator;\n\nexport interface GeneratorBase {\n  /**\n   * Provide a placeholder name and bind data at runtime.\n   */\n  name?: string;\n}\n\nexport interface SequenceGenerator extends GeneratorBase {\n  /**\n   * Generate a sequence of numbers.\n   */\n  sequence: SequenceParams;\n}\n\nexport interface SequenceParams {\n  /**\n   * The starting value of the sequence (inclusive).\n   */\n  start: number;\n  /**\n   * The ending value of the sequence (exclusive).\n   */\n  stop: number;\n  /**\n   * The step value between sequence entries.\n   *\n   * __Default value:__ `1`\n   */\n  step?: number;\n\n  /**\n   * The name of the generated sequence field.\n   *\n   * __Default value:__ `\"data\"`\n   */\n  as?: FieldName;\n}\n\nexport interface SphereGenerator extends GeneratorBase {\n  /**\n   * Generate sphere GeoJSON data for the full globe.\n   */\n  sphere: true | {};\n}\n\nexport interface GraticuleGenerator extends GeneratorBase {\n  /**\n   * Generate graticule GeoJSON data for geographic reference lines.\n   */\n  graticule: true | GraticuleParams;\n}\n\nexport interface GraticuleParams {\n  /**\n   * The major extent of the graticule as a two-element array of coordinates.\n   */\n  extentMajor?: Vector2<Vector2<number>>;\n\n  /**\n   * The minor extent of the graticule as a two-element array of coordinates.\n   */\n  extentMinor?: Vector2<Vector2<number>>;\n\n  /**\n   * Sets both the major and minor extents to the same values.\n   */\n  extent?: Vector2<Vector2<number>>;\n\n  /**\n   * The major step angles of the graticule.\n   *\n   *\n   * __Default value:__ `[90, 360]`\n   */\n  stepMajor?: Vector2<number>;\n\n  /**\n   * The minor step angles of the graticule.\n   *\n   * __Default value:__ `[10, 10]`\n   */\n  stepMinor?: Vector2<number>;\n\n  /**\n   * Sets both the major and minor step angles to the same values.\n   */\n  step?: Vector2<number>;\n\n  /**\n   * The precision of the graticule in degrees.\n   *\n   * __Default value:__ `2.5`\n   */\n  precision?: number;\n}\n"},"lineCount":null}},"error":null,"hash":"dd44e849c70551578ce3687da810e32d","cacheData":{"env":{}}}